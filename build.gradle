version = "1.0"
description = "Reactive Drawings - Example Project"

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'


sourceCompatibility = 1.8
targetCompatibility = 1.8

task initSourceFolders << { // add << before { to prevent executing during configuration phase
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.groovy.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()
    // Use Maven Central for resolving your dependencies.
    mavenCentral()

    // You can declare any Maven/Ivy/file repository here.
    // Spock snapshots are available from the Sonatype OSS snapshot repository
    // maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }


}

// In this section you declare the dependencies for your production and test code
dependencies {

    //Guava
    compile 'com.google.guava:guava:19.0'
    //Useful bytecode enhancements
    compileOnly "org.projectlombok:lombok:1.16.10"
    // Reactive extensions
    compile 'io.reactivex:rxgroovy:1.0.3'
    //compile fileTree(dir: 'libs', include: '*.jar')

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.20'
    // using logback as underlying implementation
    compile 'ch.qos.logback:logback-classic:1.1.7'


    compile 'org.codehaus.groovy:groovy-all:2.4.4'

    // https://mvnrepository.com/artifact/org.codehaus.groovy.modules.http-builder/http-builder
    compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.

    // mandatory dependencies for using Spock
    testCompile(
            'junit:junit:4.12',
            // 'org.codehaus.groovy:groovy-all:2.4.4',
            'org.spockframework:spock-core:1.0-groovy-2.4'
    )

    testCompile 'org.assertj:assertj-core:3.5.2'

    // Debug rx observables
    testCompile 'io.reactivex:rxjava-debug:1.0.3'

    // optional dependencies for using Spock
    testCompile(
            'org.hamcrest:hamcrest-core:1.3', // only necessary if Hamcrest matchers are used
            'cglib:cglib-nodep:3.1',          // allows mocking of classes (in addition to interfaces)
            'org.objenesis:objenesis:2.1'     // allows mocking of classes without default constructor (together with CGLIB)
    )

}

apply from: "gradle/ide.gradle"

//Jacoco Repo

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

sourceSets {
    main {
        output.resourcesDir = "build/classes/main"
        groovy {
            srcDirs = ['src/main/groovy']
        }
        java {
            srcDirs = ['src/main/java']
        }
    }

    test {
        output.resourcesDir = "build/classes/test"
        groovy {
            srcDirs = ['src/test/groovy']
        }
        java {
            srcDirs = ['src/test/java']
        }
    }
}

test {
    workingDir = "build/classes/test"
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
        // Or we use events method:
        // events 'standard_out', 'standard_error'

        // Or set property events:
        // events = ['standard_out', 'standard_error']

        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

task runscript(dependsOn: 'classes', type: JavaExec) {
    main = 'Main'
    classpath = sourceSets.main.runtimeClasspath
}

// Lombok annotation processor
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.franzbecker:gradle-lombok:1.7"
    }
}
